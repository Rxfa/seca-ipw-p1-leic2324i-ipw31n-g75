openapi: 3.0.1
info:
  title: SECA API
  description: This is a simple API for managing Groups and Users
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:3000
tags:
  - name: Users
  - name: Groups
  - name: Events
paths:
  /users:
    description: The resource that contains all users
    post:
      tags:
        - Users
      summary: Create user
      description: Adds a new user to the system
      operationId: insertUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
        required: true
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input
          content: {}
  /groups:
    description: Resource that contains all Groups
    get:
      tags:
        - Groups
      summary: Returns all groups owned by user
      description: By passing the user ID, you can search for available
        Groups
      operationId: listGroups
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Gets all groups owned by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/400BadRequest"
    post:
      tags:
        - Groups
      summary: Create Group
      description: Adds a group to the system
      operationId: insertGroup
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
        required: false
      responses:
        201:
          description: Group created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"

  /groups/:GroupId:
    description: The resource that represents one Group
    get:
      tags:
        - Groups
      summary: Get a group given its id
      operationId: getGroup
      security:
        - bearerAuth: []
      parameters:
        - name: groupID
          in: path
          description: ID of the group to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
    post:
      tags:
        - Groups
      summary: Adds event
      description: Adds a event to a group
      operationId: addEvent
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupID
          in: path
          description: ID of the group to add event to
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Event to add
        content:
          application/json:
            schema:
              required:
              - id
              type: object
              properties:
                id:
                  type: string
        required: true
      responses:
        200:
          description: event added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
    put:
      tags:
        - Groups
      summary: Updates a group
      description: Updates a group in the system
      operationId: updateGroup
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupID
          in: path
          description: ID of the group to be updated
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Group to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
        required: false
      responses:
        200:
          description: Group updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - Groups
      summary: Delete a group by ID
      description: Delete a group by ID
      operationId: deleteGroup
      security:
        - bearerAuth: [ ]
      parameters:
        - name: groupID
          in: path
          description: ID of the group to be fetched
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: get groups owned by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
  /groups/:GroupId/:eventId:
    delete:
      tags:
        - Groups
      summary: Delete an event by ID
      description: Delete an event by ID
      operationId: removeEvent
      security:
        - bearerAuth: [ ]
      parameters:
        - name: GroupId
          in: path
          description: ID of the group of the event to be deleted
          required: true
          schema:
            type: integer
        - name: EventId
          in: path
          description: ID of the Event to be deleted
          required: true
          schema:
            type: integer
      responses:
        200:
          description: event deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
  /events:
    description: the resource that get all Events
    get:
      tags:
        - Events
      summary: Get all events
      operationId: getPopularEvents
      parameters:
        - name: page
          in: query
          description: the page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: max number of events
          schema:
            type: integer
            minimum: 1
            default: 30
      responses:
        200:
          description: gets popular events, within the specified criteria and pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /events/:name:
    get:
      tags:
        - Events
      summary: Get event by name
      operationId: getEventByName
      parameters:
        - name: name
          in: path
          required: true
          description: name of the event to search for
          schema:
            type: string
        - name: page
          in: query
          description: the page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: max number of events
          schema:
            type: integer
            minimum: 1
            default: 30
      responses:
        200:
          description: gets events whose names match the given name, within the specified criteria and pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    NewGroup:
      required:
        - name
        - description
      type: object
      properties:
        title:
          type: string
          example: testing
        description:
          type: string
          example: To test how to create a group
    Group:
      allOf:
        - $ref: "#/components/schemas/NewGroup"
        - type: object
          required:
            - id
            - ownerId
          properties:
            id:
              type: integer
              minimum: 0
              example: 1
            ownerId:
              type: integer
              minimum: 0
              example: 1
            events:
              type: array
              items:
                $ref: "#/components/schemas/Event"
    NewUser:
      type: object
      required:
        - userName
      properties:
        userName:
          type: string
          example: testUsername
    Event:
      type: object
      required:
        - id
        - name
        - date
      properties:
        id:
          type: string
        name:
          type: string
        date:
          type: object
          example: 2024-04-07T22:00:00Z

    AlreadyExists:
      type: object
      properties:
        error:
          type: string
          example: "Already exists in the system"

    MissingParameter:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"

    InvalidBody:
      type: object
      properties:
        error:
          type: string
          example: "Invalid body content"
    NotFound:
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/groups/1"
        description:
          type: string
          example: "Group with id 1 not found"
    ServerError:
      type: object
      properties:
        error:
          type: string
          example: "Error related to the server "
    Gateway:
      type: object
      properties:
        error:
          type: string
          example: "Wrong gateway, please check your PORT"
    Success:
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "Done with Sucess"
        description:
          type: string
          example: "Done"
    Unauthorized:
      type: object
      properties:
        description:
          type: string
  responses:
    401Unauthorized:
      description: Missing or invalid authentication token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Unauthorized"
    404NotFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"

    400BadRequest:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"

    409AlreadyExists:
      description: "Invalid Request because there is one already in the system"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AlreadyExists"

    500ServerError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServerError"

    502GatewayProblem:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Gateway"